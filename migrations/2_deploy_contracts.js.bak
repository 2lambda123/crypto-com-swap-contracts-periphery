const CroDefiSwapRouter02 = artifacts.require("CroDefiSwapRouter02");
const TetherWithFaucet = artifacts.require("TetherWithFaucet");
const fs = require("fs");
const BigNumber = require("bignumber.js");
BigNumber.config({ EXPONENTIAL_AT: 1e+9 })

const toBaseValue = (value, decimal) => {
	return new BigNumber(value).times(new BigNumber(10).pow(decimal)).toString()
}

module.exports = (deployer, network, account) => {
	const WETH = JSON.parse(fs.readFileSync(`./WETH/contract-${network}.json`, "utf8"));
	const coreFactoryJSON = JSON.parse(fs.readFileSync("./swap-contracts-core/build/contracts/UniswapV2Factory.json", "utf8"));
	const coreFactoryNetwork = Object.keys(coreFactoryJSON.networks)[0];
	const coreFactoryAddress = coreFactoryJSON.networks[coreFactoryNetwork].address;

	deployer.deploy(CroDefiSwapRouter02, coreFactoryAddress, WETH.address).then(contract => {
		const totalSupply = toBaseValue(100000000, 6);
		deployer.deploy(TetherWithFaucet, "Tether", "USDT", 6,  totalSupply).then(tetherContract => {
				tetherContract.approve(contract.address, totalSupply).then(tetherContract => {
					contract.addLiquidityETH(tetherContract.address, toBaseValue(10000,6), 0, 0, account[0], 1699504849)
						.then(contract => console.log("Haha"))
						.catch(err => console.log(err))
				})
			})
	})
};
